/*********************************************************************
*
*       InitTarget
*/
void ResetTarget(void) {
  int AIRCR_ADDR     ;
  int DHCSR_ADDR     ;
  int DEMCR_ADDR     ;
  int AHBAP_REG_CTRL ;
  int AHBAP_REG_ADDR ;
  int AHBAP_REG_DATA ;
  int DP_REG_SELECT  ;
  int Ctrl;
  int demcr;
  int v;
  int Tries;
  int Done;
  AIRCR_ADDR         = 0xE000ED0C;
  DHCSR_ADDR         = 0xE000EDF0;
  DEMCR_ADDR         = 0xE000EDFC;
  AHBAP_REG_CTRL     = 0;
  AHBAP_REG_ADDR     = 1;
  AHBAP_REG_DATA     = 3;
  DP_REG_SELECT      = 2;

  Report("TC956x (ARM cortex-M3) J-Link script");
  
  JLINK_CORESIGHT_Configure("IRPre=0;DRPre=0;IRPost=0;DRPost=0;IRLenDevice=4");

  //
  // Power-up complete DAP
  //
  Ctrl = 0
       | (1 << 30)     // System power-up
       | (1 << 28)     // Debug popwer-up
       | (1 << 5)      // Clear STICKYERR
       ;
  JLINK_CORESIGHT_WriteDP(1, Ctrl);
  //
  // Select AHB-AP and configure it 
  //
  JLINK_CORESIGHT_WriteDP(DP_REG_SELECT,  (0 << 4) | (0 << 24));                                     // Select AP[0] (AHB-AP) bank 0
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_CTRL, (1 << 4) | (1 << 24) | (1 << 25) | (1 << 29) | (2 << 0));  // Auto-increment, Private access, HMASTER = DEBUG, Access size: word
 
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_ADDR, DHCSR_ADDR);
  v = JLINK_CORESIGHT_ReadAP(AHBAP_REG_DATA);
  v &= 0x3F;                   // Mask out "debug" bits
  v |= 0xA05F0000;             // Debug key to make a write to the DHCSR a valid one
  v |= 0x00000002;             // Halt the core
  v |= 0x00000001;             // Enable debug functionalities of the core
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_ADDR, DHCSR_ADDR);
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_DATA, v);
  //
  // Set VC_CORERESET
  //
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_ADDR, DEMCR_ADDR);
  demcr = JLINK_CORESIGHT_ReadAP(AHBAP_REG_DATA);
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_ADDR, DEMCR_ADDR);
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_DATA, demcr | 0x00000001);
  //
  // SYSRESETREQ
  //
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_ADDR, 0x40001008);
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_DATA, 0xc0050091);
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_ADDR, 0x40001008);
  JLINK_CORESIGHT_WriteAP(AHBAP_REG_DATA, 0xc0050090);
  //
  // Wait until CPU is halted
  //
  Tries = 0;
  Done  = 0;
  do {
    JLINK_CORESIGHT_WriteAP(AHBAP_REG_ADDR, DHCSR_ADDR);
    v = JLINK_CORESIGHT_ReadAP(AHBAP_REG_DATA);
    //
    // Check if CPU is halted. If so, we are done
    //
    if (Tries >= 5) {
      MessageBox("STM32 (connect): Timeout while waiting for CPU to halt after reset. Manually halting CPU.");
      Done = 1;
    }
    if (v & 0x00020000) { // 1 << 17
      Done = 1;
    }
    Tries = Tries + 1;
    SYS_Sleep(100);
  } while(Done == 0);


}

